# -*- coding: utf-8 -*-
"""Copy of Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E_tGans3onZGIoDli991LyO1YKqOgTHl
"""

!pip install -q pdfplumber sentence-transformers openpyxl

from google.colab import files
uploaded = files.upload()  # Upload PDF files manually here

import os
import pdfplumber
import pandas as pd
import numpy as np
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
import matplotlib.pyplot as plt

model = SentenceTransformer('all-MiniLM-L6-v2')

resume_texts = []
resume_names = []

def extract_text_from_pdf(file_path):
      text = ""
      try:
          with pdfplumber.open(file_path) as pdf:
              for page in pdf.pages:
                  page_text = page.extract_text()
                  if page_text:
                     text += page_text + "\n"
          return text.strip()
      except Exception as e:
           print(f"Error reading {file_path}: {e}")
      return ""

for file_name in uploaded.keys():
    text = extract_text_from_pdf(file_name)
    if text:
       resume_texts.append(text)
       resume_names.append(file_name)
    else:
       print(f"⚠️ Skipped unreadable or empty file: {file_name}")

if not resume_texts:
      raise ValueError("❌ No valid resume content found. Please upload text-based PDFs.")

job_description = """
We are hiring a Data Analyst with experience in Python, SQL, Power BI, and strong communication skills.
The ideal candidate should be able to build dashboards, perform data cleaning, and extract actionable insights.
"""

all_texts = [job_description] + resume_texts
embeddings = model.encode(all_texts)

job_vec = embeddings[0]
resume_vecs = embeddings[1:]

similarities = cosine_similarity([job_vec], resume_vecs)[0]

df_results = pd.DataFrame({
    'Resume Name': resume_names,
        'Similarity Score (%)': np.round(similarities * 100, 2)
        })
df_results = df_results.sort_values(by='Similarity Score (%)', ascending=False).reset_index(drop=True)

df_results.to_excel("resume_match_results.xlsx", index=False)

files.download("resume_match_results.xlsx")

plt.figure(figsize=(10, 5))
plt.barh(df_results['Resume Name'], df_results['Similarity Score (%)'], color='skyblue')
plt.xlabel("Similarity Score (%)")
plt.title("Top Resume Matches to Job Description")
plt.gca().invert_yaxis()
plt.tight_layout()
plt.show()

print("Top Matching Resumes:")
print(df_results.head())
